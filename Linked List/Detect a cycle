public class Solution {
    public boolean hasCycle(ListNode head) {
        
        ListNode temp = head;
// Create a map to keep track
// of encountered node
        Map<ListNode, Integer> nodeMap = new HashMap<>();

    while(temp!=null){
        // If the node is already in
            // the map, there is a loop
        if(nodeMap.containsKey(temp)){
            return true;
        }
        // Store the current node in the map
        nodeMap.put(temp,1);

        temp=temp.next;
    }
     // Step 3: If the list is successfully
    // traversed without a loop, return false
    return false;
    }
}
TC:O(N) SC:O(N)

Optimized Approach:
public class Solution {
    public boolean hasCycle(ListNode head) {
        ListNode fast = head;
        ListNode slow = head;
        while(fast!=null && fast.next!=null){
            fast=fast.next.next;
            slow=slow.next;
        
        if(slow==fast){
            return true;
        }
        }
        return false;
    }
}
SC:O(1) TC:O(N)
